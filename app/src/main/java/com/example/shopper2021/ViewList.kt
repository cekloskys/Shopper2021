package com.example.shopper2021

import android.content.Intent
import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.widget.AdapterView.OnItemClickListener
import android.widget.ListView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat

class ViewList : AppCompatActivity() {
    // declare an Intent
    // var intent: Intent? = null

    // declare a Bundle and a long for data passed from MainActivity in Bundle
    var bundle: Bundle? = null
    var id: Long = 0

    // declare a DBHandler
    var dbHandler: DBHandler? = null

    // declare a ShoppingListItems Cursor Adapter
    var shoppingListItemsAdapter: ShoppingListItems? = null

    // declare a ListView
    var itemListView: ListView? = null

    // declare String for name of shopping list
    var shoppingListName: String? = null

    // declare NotificationManagerCompat - used to show notifications
    var notificationManagerCompat: NotificationManagerCompat? = null

    /**
     * This method initializes the Action Bar and View of the ViewList Activity.
     * @param savedInstanceState a Bundle object that is passed into the
     * onCreate method of every Android Activity.
     * Activities have the ability, under special
     * circumstances, to restore themselves to a
     * previous state using the data stored in this
     * object.  If there is no available instance
     * data, the object will be null.
     */
    override fun onCreate(savedInstanceState: Bundle?) {

        // code generated by Android Studio that initializes the View and
        // Action Bar of the ViewList Activity
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_view_list)
        val toolbar = findViewById<Toolbar>(R.id.toolbar)
        setSupportActionBar(toolbar)

        // initialize Bundle
        bundle = getIntent().extras

        // get shopping list id passed in Bundle and store it in long
        id = bundle!!.getLong("_id")

        // initialize DBHandler
        dbHandler = DBHandler(this, null)

        // get shopping list name
        shoppingListName = dbHandler!!.getShoppingListName(id.toInt())

        // set the Title of the ViewList activity to the shopping list name
        this.title = shoppingListName

        // initialize ListView
        itemListView = findViewById<View>(R.id.itemsListView) as ListView

        // initialize ShoppingListItems CursorAdapter
        shoppingListItemsAdapter = ShoppingListItems(this, dbHandler!!.getShoppingListItems(id.toInt()), 0)

        // set ShoppingListItems CursorAdapter on ListView
        itemListView!!.adapter = shoppingListItemsAdapter

        // register an On Item Click Listener on ListView
        itemListView!!.onItemClickListener = OnItemClickListener { parent, view, position, id ->
            /**
             * This method gets called when a row in the ListView is clicked.
             * @param parent itemListView
             * @param view ViewList Activity view
             * @param position position of clicked row
             * @param id database id of clicked row
             */
            /**
             * This method gets called when a row in the ListView is clicked.
             * @param parent itemListView
             * @param view ViewList Activity view
             * @param position position of clicked row
             * @param id database id of clicked row
             */

            // call method that updates a shopping list item's item_has attribute
            // to true if it hasn't already been set to true
            updateItem(id)

            // initialize Intent for ViewItem Activity
            intent = Intent(this@ViewList, ViewItem::class.java)

            // put the database id in the Intent
            intent!!.putExtra("_id", id)

            // put the database id of the clicked list in the Intent
            intent!!.putExtra("_list_id", this@ViewList.id)

            // start the Activity
            startActivity(intent)
        }

        // set the sub-title ViewList activity to the shopping list total cost
        toolbar.subtitle = "Total Cost: $" + dbHandler!!.getShoppingListTotalCost(id.toInt())

        // initialize NotificationManagerCompat
        notificationManagerCompat = NotificationManagerCompat.from(this)
    }

    /**
     * This method further initializes the Action Bar of the ViewList Activity.
     * It gets the code in the menu main resource file and incorporates it
     * into the Action Bar.
     * @param menu menu view list resource file
     * @return true
     */
    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        // Inflate the menu view list; this adds items to the action bar if it is present.
        menuInflater.inflate(R.menu.menu_view_list, menu)
        return true
    }

    /**
     * This method gets called when a menu item in the overflow menu is
     * selected and it controls what happens when the menu item is selected.
     * @param item selected menu item in overflow menu
     * @return true if menu item is selected, else false
     */
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        // get the id of the menu item selected
        return when (item.itemId) {
            R.id.action_home -> {
                // initialize an Intent for the MainActivity and start it
                // if the id is for the MainActivity
                intent = Intent(this, MainActivity::class.java)
                startActivity(intent)
                true
            }
            R.id.action_create_list -> {
                // initialize an Intent for the CreateList Activity and start it
                // if the id is for the CreateList Activity
                intent = Intent(this, CreateList::class.java)
                startActivity(intent)
                true
            }
            R.id.action_add_item -> {
                // initialize an Intent for the AddItem Activity
                intent = Intent(this, AddItem::class.java)
                // put the database id in the Intent
                intent!!.putExtra("_id", id)
                // start the Activity
                startActivity(intent)
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    /**
     * This method gets called when the add Floating Action Button is clicked.
     * It starts the AddItem Activity.
     * @param view ViewList view
     */
    fun openAddItem(view: View?) {

        // initialize an Intent for the AddItem Activity
        intent = Intent(this, AddItem::class.java)
        // put the database id in the Intent
        intent!!.putExtra("_id", id)
        // start the Activity
        startActivity(intent)
    }

    /**
     * This method updates a shopping list item's item_has attribute to true if
     * it hasn't already been set to true.
     * @param id shopping list item's id
     */
    fun updateItem(id: Long) {

        // if shopping list item hasn't been purchased
        if (dbHandler!!.isItemUnPurchased(id.toInt()) != 0) {
            // update its item_has to true
            dbHandler!!.updateItem(id.toInt())

            // display Toast indicating shopping list item has been purchased
            Toast.makeText(this, "Item purchased!", Toast.LENGTH_LONG).show()

            // refresh shopping list item in the ListView
            shoppingListItemsAdapter!!.swapCursor(dbHandler!!.getShoppingListItems(this.id.toInt()))
            shoppingListItemsAdapter!!.notifyDataSetChanged()
        }

        // if all shopping list items have been purchased
        if (dbHandler!!.getUnpurchasedItems(this.id.toInt()) == 0) {

            // initialize Notification
            val notification = NotificationCompat.Builder(this, App.CHANNEL_SHOPPER_ID)
                    .setSmallIcon(R.mipmap.ic_launcher)
                    .setContentTitle("Shopper")
                    .setContentText("$shoppingListName completed!").build()

            // show Notification
            notificationManagerCompat!!.notify(1, notification)
        }
    }

    /**
     * This method gets called when the delete button in the Action Bar of the
     * ViewListActivity gets clicked.  It deletes a row in the
     * shoppinglistitem and shoppinglist tables.
     * @param menuItem delete item menu item
     */
    fun deleteList(menuItem: MenuItem?) {

        // delete shopping list from database
        dbHandler!!.deleteShoppingList(id.toInt())

        // display "List Deleted!" Toast
        Toast.makeText(this, "List Deleted!", Toast.LENGTH_LONG).show()
    }
}