package com.example.shopper2021

import androidx.appcompat.app.AppCompatActivity
import android.content.Intent
import android.widget.EditText
import com.example.shopper2021.DBHandler
import android.os.Bundle
import com.example.shopper2021.R
import android.app.DatePickerDialog.OnDateSetListener
import android.widget.DatePicker
import android.app.DatePickerDialog
import android.view.Menu
import android.view.MenuItem
import android.view.View
import com.example.shopper2021.MainActivity
import com.example.shopper2021.CreateList
import android.widget.Toast
import androidx.appcompat.widget.Toolbar
import java.text.SimpleDateFormat
import java.util.*

class CreateList : AppCompatActivity() {
    // declare an Intent
    // var intent: Intent? = null

    // declare EditTexts
    var nameEditText: EditText? = null
    var storeEditText: EditText? = null
    var dateEditText: EditText? = null

    // declare Calendar
    var calendar: Calendar? = null

    // declare a DBHandler
    var dbHandler: DBHandler? = null

    /**
     * This method initializes the Action Bar and View of the CreateList Activity.
     * @param savedInstanceState a Bundle object that is passed into the
     * onCreate method of every Android Activity.
     * Activities have the ability, under special
     * circumstances, to restore themselves to a
     * previous state using the data stored in this
     * object.  If there is no available instance
     * data, the object will be null.
     */
    override fun onCreate(savedInstanceState: Bundle?) {

        // code generated by Android Studio that initializes the View and
        // Action Bar of the CreateList Activity
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_create_list)
        val toolbar = findViewById<Toolbar>(R.id.toolbar)
        setSupportActionBar(toolbar)

        // initialize EditTexts
        nameEditText = findViewById<View>(R.id.nameEditText) as EditText
        storeEditText = findViewById<View>(R.id.storeEditText) as EditText
        dateEditText = findViewById<View>(R.id.dateEditText) as EditText

        // initialize Calendar
        calendar = Calendar.getInstance()

        // initialize DatePickerDialog and register an On Date Set Listener to it
        val date = OnDateSetListener { view, year, month, dayOfMonth ->
            /**
             * This method handles the On Date Set event.
             * @param view DatePickerDialog View
             * @param year selected year
             * @param month selected month
             * @param dayOfMonth selected day
             */
            /**
             * This method handles the On Date Set event.
             * @param view DatePickerDialog View
             * @param year selected year
             * @param month selected month
             * @param dayOfMonth selected day
             */

            // set the Calendar year, month, and day of month to year, month, and
            // day of month selected in DatePickerDialog
            calendar?.set(Calendar.YEAR, year)
            calendar?.set(Calendar.MONTH, month)
            calendar?.set(Calendar.DAY_OF_MONTH, dayOfMonth)

            // call method that updates Date EditText with date in Calendar
            updateDueDate()
        }

        // register an On Click (double click) Listener to the date EditText
        dateEditText!!.setOnClickListener(View.OnClickListener
        /**
         * This method handles the On Click event.
         * @param v CreateList view
         */
        { // display DatePickerDialog with current date selected
            DatePickerDialog(this@CreateList,
                    date,
                    calendar!!.get(Calendar.YEAR),
                    calendar!!.get(Calendar.MONTH),
                    calendar!!.get(Calendar.DAY_OF_MONTH)).show()
        })

        // initialize DBHandler
        dbHandler = DBHandler(this, null)
    }

    /**
     * This method gets called when a date is set in DatePickerDialog.
     */
    private fun updateDueDate() {

        // create a format for the date in the calendar
        val simpleDateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())

        // apply format to date in calendar and set formatted date in date EditText
        dateEditText!!.setText(simpleDateFormat.format(calendar!!.time))
    }

    /**
     * This method further initializes the Action Bar of the CreateList Activity.
     * It gets the code in the menu create list resource file and incorporates it
     * into the Action Bar.
     * @param menu menu create list resource file
     * @return true
     */
    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        // Inflate the menu create list; this adds items to the action bar if it is present.
        menuInflater.inflate(R.menu.menu_create_list, menu)
        return true
    }

    /**
     * This method gets called when a menu item in the overflow menu is
     * selected and it controls what happens when the menu item is selected.
     * @param item selected menu item in overflow menu
     * @return true if menu item is selected, else false
     */
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        // get the id of the menu item selected
        return when (item.itemId) {
            R.id.action_home -> {
                // initialize an Intent for the MainActivity and start it
                // if the id is for the MainActivity
                intent = Intent(this, MainActivity::class.java)
                startActivity(intent)
                true
            }
            R.id.action_create_list -> {
                // initialize an Intent for the CreateList Activity and start it
                // if the id is for the CreateList Activity
                intent = Intent(this, CreateList::class.java)
                startActivity(intent)
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    /**
     * This method gets called when the add button in the Action Bar gets clicked.
     * @param menuItem add list menu item
     */
    fun createList(menuItem: MenuItem?) {

        // get data input in EditTexts and store it in Strings
        val name = nameEditText!!.text.toString()
        val store = storeEditText!!.text.toString()
        val date = dateEditText!!.text.toString()

        // trim Strings and see if they're equal to empty Strings
        if ((name.trim { it <= ' ' } == "") || (store.trim { it <= ' ' } == "") || (date.trim { it <= ' ' } == "")) {
            // display "Please enter a name, store, and date!" Toast if any of the Strings are empty
            Toast.makeText(this, "Please enter a name, store, and date!", Toast.LENGTH_LONG).show()
        } else {
            // add shopping list into database
            dbHandler!!.addShoppingList(name, store, date)

            // display "Shopping list created!" Toast of none of the Strings are empty
            Toast.makeText(this, "Shopping list created!", Toast.LENGTH_LONG).show()
        }
    }
}